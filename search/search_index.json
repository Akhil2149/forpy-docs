{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Forpy is an asynchronous library which allows you to receive Fortnite Stats data from FortniteTracker . Synchronous usage is not currently supported.Forpy requires python 3.5.3 or above. Support for earlier versions of python is not provided. Installation You can get the library directly from PyPI: pip install forpy If you would like to install forpy from GitHub: git clone https://github.com/Akhil2149/forpy cd forpy pip install . Usage To use this library, create an application in Tracker Network website and then copy the API Key Provided. It looks something like XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX Getting Started Import forpy and asyncio import forpy import asyncio Define token (API Key). You can also set this as an environment variable. WARNING: DO NOT POST THIS PUBLICLY token = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX' The main part of the code should look something like this: async def main(): client = forpy.Forpy(token,timeout=5) # timeout is an optional parameter and it defaults to 10 on passing nothing platform = 'pc' epic_username = 'Ninja' #Here platform can be pc,xbl or psn and epic_username is the epic games username. player = await client.get_player(platform,epic_username) player_id = player.account_id #Returns player's account id. 4735ce91-3292-4caf-8a5b-17789b40f79c in this case solos = await player.get_solos() #Returns a Dictionary await client.close() #Close the aiohttp.ClientSession() loop = asyncio.get_event_loop() loop.run_until_complete(main()) Available Methods: player.get_duos() player.get_squads() player.get_lifetime_stats() player.get_id() Coroutines client.get_player(platform,epic_username) Returns a Dictionary client.get_id(platform,epic_username) client.get_solos(platform,epic_username) client.get_duos(platform,epic_username) client.get_squads(platform,epic_username) client.get_lifetime_stats(platform,epic_username) where client = fropy.Fropy(token) and player = await client.get_player(platform,epic_username) Discord.py Example import discord from discord.ext import commands import forpy class Fortnite: \"\"\"Example Cog\"\"\" def __init__(self,bot): self.bot = bot self.client = forpy.Forpy(token,timeout=5) @commands.command() async def profile(self,ctx,platform,*,epic_username): \"\"\"This is just an example. Do not use this. It is not the best way of doing it\"\"\" player = await self.client.get_player(platform,epic_username) await ctx.send(player) def cog_unload(self): await self.client.close() def setup(bot): bot.add_cog(Fortnite(bot)) Thanks for reading :)","title":"Home"},{"location":"#overview","text":"Forpy is an asynchronous library which allows you to receive Fortnite Stats data from FortniteTracker . Synchronous usage is not currently supported.Forpy requires python 3.5.3 or above. Support for earlier versions of python is not provided.","title":"Overview"},{"location":"#installation","text":"You can get the library directly from PyPI: pip install forpy If you would like to install forpy from GitHub: git clone https://github.com/Akhil2149/forpy cd forpy pip install .","title":"Installation"},{"location":"#usage","text":"To use this library, create an application in Tracker Network website and then copy the API Key Provided. It looks something like XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX Getting Started Import forpy and asyncio import forpy import asyncio Define token (API Key). You can also set this as an environment variable. WARNING: DO NOT POST THIS PUBLICLY token = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX' The main part of the code should look something like this: async def main(): client = forpy.Forpy(token,timeout=5) # timeout is an optional parameter and it defaults to 10 on passing nothing platform = 'pc' epic_username = 'Ninja' #Here platform can be pc,xbl or psn and epic_username is the epic games username. player = await client.get_player(platform,epic_username) player_id = player.account_id #Returns player's account id. 4735ce91-3292-4caf-8a5b-17789b40f79c in this case solos = await player.get_solos() #Returns a Dictionary await client.close() #Close the aiohttp.ClientSession() loop = asyncio.get_event_loop() loop.run_until_complete(main()) Available Methods: player.get_duos() player.get_squads() player.get_lifetime_stats() player.get_id() Coroutines client.get_player(platform,epic_username) Returns a Dictionary client.get_id(platform,epic_username) client.get_solos(platform,epic_username) client.get_duos(platform,epic_username) client.get_squads(platform,epic_username) client.get_lifetime_stats(platform,epic_username) where client = fropy.Fropy(token) and player = await client.get_player(platform,epic_username)","title":"Usage"},{"location":"#discordpy-example","text":"import discord from discord.ext import commands import forpy class Fortnite: \"\"\"Example Cog\"\"\" def __init__(self,bot): self.bot = bot self.client = forpy.Forpy(token,timeout=5) @commands.command() async def profile(self,ctx,platform,*,epic_username): \"\"\"This is just an example. Do not use this. It is not the best way of doing it\"\"\" player = await self.client.get_player(platform,epic_username) await ctx.send(player) def cog_unload(self): await self.client.close() def setup(bot): bot.add_cog(Fortnite(bot)) Thanks for reading :)","title":"Discord.py Example"}]}